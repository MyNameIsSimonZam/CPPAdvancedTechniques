#include "Header.h"

/*1. Ведомость учёта
Что нужно сделать
Вы уже создавали программу чтения и записи ведомости. Теперь её нужно обобщить и
дополнить использованием структур. Формат ведомости прежний: • сначала — имя и
фамилия получателя денег, • далее — дата выдачи в формате ДД.ММ.ГГГГ, • затем —
сумма выплаты в рублях. Данные разделяются пробелами. В конце каждой записи
должен быть перевод строки. Структура данных должна соответствовать этому
формату.

При старте программы пользователь отправляет команду: list или add. Команда list
осуществляет чтение из файла ведомости, как и прежде, только уже в структуры
данных, и отображает их на экране. Команда add добавляет новую запись в конец
ведомости.

Советы и рекомендации
• Чтобы определить, где заканчивается файл, используйте функцию file.eof().
• Из-за завершающего переноса строки при чтении данных из файла стоит отдельно
прочитать имя получателя денег. Если после чтения имени получателя денег признак
file.eof() принял значение true, значит, файл закончился. • Используйте вектор
структур. Для выбора команды потребуется подобная конструкция:

if (command == "list")
{
…
}
*/

void task10() {}

/*2. Модель данных для посёлка
Что нужно сделать
Используя структуры данных, создайте подробную модель посёлка.
Что известно
• Посёлок состоит из участков, и у каждого участка есть свой номер.
• На любом участке может стоять жилой дом, а также могут быть и другие
сооружения: — гараж, — сарай (бытовка), — баня. • У каждого здания есть
информация о площади, которую оно занимает на участке. • В доме может быть 1–3
этажа, на этаже — 2–4 комнаты: — спальня, — кухня, — ванная, — детская, —
гостиная. • У каждого этажа есть информация о количестве комнат и высоте потолка
на этаже. • У каждой комнаты есть информация о занимаемой площади. • В доме и
бане может быть печь с трубой. Для всех упомянутых сущностей нужно объявить
структуры данных.

Обязательно для выполнения задания
Опишите структуры данных для создания модели посёлка. Структуры должны быть:
• связными и легко расширяемыми,
• без дублирующих конструкций.

Дополнительно
Реализуйте заполнение структур данных.
Пользователь заполняет данные о посёлке: вводит общее количество участков, а
потом детализирует каждый. Сначала указывается количество построек на участке, а
затем — информация, какие это постройки, сколько этажей в доме, какие комнаты на
этажах. После ввода данных можно рассчитать суммарный параметр, например процент
земли, занимаемой постройками, от общей площади посёлка. Главное в этой задаче
не операция подсчёта, а структуры данных.

Советы и рекомендации
• Используйте свои знания о типах данных в C++.
• Можно применять перечисления и векторы, создавать структуры внутри структур и
так далее. • Перечислять комнаты и типы зданий нужно следующим образом:

enum room_type
{
living,
children,
…

• Затем нужно использовать полученный тип внутри структуры. Алгоритм заполнения
каждого объекта одинаковый: — создать объект нужного типа, — ввести с клавиатуры
значения, — добавить объект в вектор при помощи push_back.*/

void task11() {}

/*3. Математический вектор
Что нужно сделать
Реализуйте структуру двумерного математического вектора и основные операции над
ним. Обе координаты вектора (x и y) должны быть вещественными числами. Начиная
работу с программой, пользователь вводит команду. Затем в зависимости от команды
пользователь вводит аргументы. Это могут быть как векторы, так и обычные
скалярные значения. Результат помещается в стандартный вывод. Это тоже может
быть или вектор, или скаляр.

Реализуйте в виде отдельных функций операции:
• сложение двух векторов — команда add;
• вычитание двух векторов — команда subtract;
• умножение вектора на скаляр — команда scale;
• нахождение длины вектора — команда length;
• нормализация вектора — команда normalize.

Советы и рекомендации
Для выбора команды используйте конструкцию вида if (operation == "add"). Тут так
и напрашиваются отдельные функции для каждой операции.*/

void task12() {}
